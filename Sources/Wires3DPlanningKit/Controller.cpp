#include "Controller.h"

#include "AddSocketCommand.h"
#include "ModelSocket.h"
#include "ModelWall.h"
#include "Model.h"
#include "View2D.h"
#include "SecondView2D.h"

#include <memory>

Controller::~Controller()
{
}

//Controller::Controller(Model& model)
//    :m_model(model)
//{
//}

Controller::Controller(Model& model)
    : m_model(model)
    , m_commands()
{
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::AddView(View2D* view_2d)
{
    m_views_2d.push_back(view_2d);
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::Redo()
{
    m_commands.Redo();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::Undo()
{
    m_commands.Undo();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::AddWall(const ModelWall& model_wall)
{
    m_model.AddWall(model_wall);
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::AddSocket(const ModelSocket& model_socket)
{
    auto temp_socket_command = std::make_unique<AddSocketCommand>(*this, model_socket);
    m_commands.Register(std::move(temp_socket_command));

    this->Update(model_socket);
}
///////////////////////////////////////////////////////////////////////////////////////////////////

size_t Controller::GetWallsNumber()
{
    return m_model.GetWallsNumber();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

size_t Controller::GetSocketsNumber()
{
    return m_model.GetSocketsNumber();
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::Update(const ModelSocket& model_socket)
{
    m_model.AddSocket(model_socket);
    for(auto view : m_views_2d)
    {
        view->Update(model_socket);
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////

void Controller::Remove(const int id)
{
    for(auto view : m_views_2d)
    {
        view->Remove(id);
    }
    m_model.Remove(id);
}
///////////////////////////////////////////////////////////////////////////////////////////////////